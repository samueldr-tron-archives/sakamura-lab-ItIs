
		  ＝ BSD UNIX 上での動作環境 ＝

	    （Release 1.4β対応，最終更新: 6-Jul-1998）

------------------------------------------------------------------------ 
	ItIs - An ITRON Implementation for Research and Education

Copyright (C) 1989-1997 by Sakamura Laboratory, Univ. of Tokyo, JAPAN
Copyright (C) 1997-1998 by Embedded and Real-Time Systems Laboratory,
				Toyohashi Univ. of Technology, JAPAN

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. Neither the names of the universities nor the names of the laboratories
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE UNIVERSITIES OR THE LABORATORIES BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 * TRON は The Real-time Operating system Nucleus の略称です．
 * ITRON は Industrial TRON の略称です．
 * μITRON は Micro Industrial TRON の略称です．
 * ItIs は ITRON Implementation by Sakamura Lab の略称です．
------------------------------------------------------------------------


１．BSD UNIX上での動作環境の概要

ItIs のシミュレーション環境として，BSD UNIX上で動作する設定を用意して
いる．このシミュレーション環境は，BSD UNIX の 1つのプロセスの中で複数
のタスクを切り替えて動作させるもので，BSD UNIX上のスレッドライブラリと
して使うこともできる．


1.1. サポートしていない機能

BSD UNIX上のシミュレーション環境では，ItIs が持っている機能の内，以下
の機能はサポートしていない．

・ソフトウェア割込みによるシステムコール呼び出し
・def_int システムコール
・拡張SVC機能と準タスク部
・vset_reg, vget_reg システムコール
・性能評価用システム時刻参照機能


1.2. ターゲットシステムと移植

現時点では，ターゲットシステムとして Sparc プロセッサ上の SunOS 4.X
（SunOS 4.1.4 で動作確認）と x86 プロセッサ上での FreeBSD（FreeBSD
2.2.6 で動作確認）のみをサポートしているが，他の BSD UNIX への移植も可
能である．BSD UNIX に依存した機能を利用しているため，他の系列の UNIX 
への移植は手間がかかるものと思われる．

BSD UNIX上のシミュレーション環境の実装にあたって，下の文献を参考にした．
他の BSD UNIX への移植の際には，参考になる文献であろう．

[1] 安倍広多, 松浦敏雄,「移植性に優れた軽量プロセスライブラリの実装法」,
Proc. 21st JUS UNIX Symposium, pp. 77-89, 1993.


1.3. システムコールインタフェース

BSD UNIX上のシミュレーション環境では，シミュレーション環境を構成するす
べてのプログラム（タスク部，タスク独立部，カーネルの内部）が同じ実行レ
ベルで実行される．そのため，タスク部と準タスク部の区別は意味がなく，準
タスク部および拡張SVC機能はサポートしていない．

システムコールの呼び出し方としては，サブルーチンコールによる方法のみを
サポートし，システムコールインタフェースは，C言語のコーリングコンベン
ションそのままになっている．


1.4. 割込み

BSD UNIX上のシミュレーション環境では，シグナルが割込みに対応する．シグ
ナルハンドラは割込みハンドラとして扱われ，シグナルマスクが割込みマスク
に対応する．ユーザがシグナルハンドラを定義することも可能であるが，一定
のルールに従うことが必要である．

BSD UNIX のシグナルの内，SIGUSR2 はタスクディスパッチ処理のために用い
ているため，ユーザが利用することはできない．また，SIGALRM はカーネル内
のタイマ割込みとして用いている．設定によっては，SIGIO のハンドラもカー
ネル内で定義される（SIGIO の扱いについては３章を参照）．


1.5. メモリ管理

標準の設定では，ネイティブ環境と同様に，カーネルが必要とする各種の領域
はシステムメモリプールから確保/解放される．システムメモリプールの領域
は，OS標準の sbrkシステムコールによって確保される．システム構成ファイ
ルで，システムメモリプールを使わない設定にする（num_kernel_mpl を 0 に
する）ことで，システムメモリプールから領域を確保/解放する代わりに，OS 
標準の malloc，free ライブラリが使われる．

メモリの保護属性を変更するための mprotectシステムコールを OS がサポー
トしている場合には，タスクが用いるスタックの下の 1ページ分の領域をアク
セス禁止領域に設定し，スタック溢れの検出を可能にしている．アクセス禁止
にする領域の分を補うために，スタック領域は多めのサイズを確保している．
そのため，システムメモリプールの使用量は，ネイティブ環境とは一致しない 
（デフォルト/最小のシステムスタックサイズも異なるため，システムメモリ
プールの使用量が一致しなくなるのはやむを得ない）．


1.6. 時間管理

周期割込みの間隔は 10ミリ秒を標準としているが，ターゲット依存のタイマ
モジュールのみの修正で変更できる．シミュレーション環境全体が 1つのプロ
セスとして実行されるため，シミュレーション環境全体に割り当てられる CPU
時間が UNIX のスケジューラによって決められる．そのため，高い時間精度を
期待することはできない．

時間を表すパラメータ（SYSTIME，CYCTIME，ALMTIME，DLYTIME，TMO 型のもの）
の基準時間は，すべて 1ミリ秒である．


２．システムコール仕様の違い

以下では，BSD UNIX上でのシミュレーション環境での，各システムコールの仕
様の違いについて述べる．

(1) cre_tsk		タスク生成

・タスクを動作させる動作モードを指定する機能はない．

・ユーザスタックとシステムスタックの区別はない．両者のサイズを加えたサ
イズのスタック領域が確保される．

(2) dis_dsp		ディスパッチ禁止

・dis_dsp は，シグナルマスクを SIGUSR2 シグナルのみマスクした状態に設
定する．

(3) ena_dsp		ディスパッチ許可

・ena_dsp は，すべてのシグナルマスクを解除した状態に設定する．

(4) def_int		割込みハンドラ定義

・サポートしていない．

(5) loc_cpu		割込みとディスパッチの禁止

・loc_cpu は，すべてのシグナルをマスクした状態に設定する．

(6) unl_cpu		割込みとディスパッチの許可

・unl_cpu は，すべてのシグナルマスクを解除した状態に設定する．

(7) chg_iXX		割込みマスク変更

・名称は chg_ims としている．

・chg_ims は，シグナルマスクを指定した値に設定する．タスク独立部から呼
び出した場合には，SIGUSR2 シグナルのマスクを解除することはできない（解
除しようとすると，E_PAR エラーになる）．また，SIGUSR2 以外のシグナルを
マスクした状態に設定する場合には，SIGUSR2 もマスクした状態にしなければ
ならない（SIGUSR2 をマスクしない場合，E_PAR エラーになる）．

・設定したシグナルマスクの値と，ref_sys で参照できるタスク部のシステム
状態（sysstat）の関係は以下のようになる．

	シグナルマスク		sysstat
	--------------------------------
	SIGUSR2 以外もマスク	TTS_LOC
	SIGUSR2 のみマスク	TTS_DDSP
	すべて解除		TTS_TSK

(8) ref_iXX		割込みマスク参照

・名称は ref_ims としている．

・ref_ims は，シグナルマスクの現在値を読み出すシステムコールである．

(9) get_ver		バージョン参照

・CPU情報は 0x0000（CPU を特定しない）になる．これは，CPU の機能をその
まま使っているわけではないため，正確な CPU情報を返す意義が低いためであ
る．

(10) def_svc		拡張SVCハンドラ定義

・サポートしていない．

(11) vset_reg		タスクのレジスタ内容設定
(12) vget_reg		タスクのレジスタ内容参照

・サポートしていない．

(13) vget_tim		性能評価用システム時刻参照

・サポートしていない．


３．ノンブロッキングI/O

3.1. ノンブロッキングI/O の必要性

ItIs のシミュレーション環境全体が 1つのプロセスとして動作しているため，
ItIs のタスクから UNIX カーネル内でブロックするシステムコールを呼び出
した場合，シミュレーション環境全体がブロックされ，他のタスクを実行する
ことができなくなる（厳密には，ブロック中にシグナルを受け取った場合には，
ブロックが解除されて実行を継続できる）．そのため，UNIX カーネル内でのブ
ロックが起こらないように，低速の I/Oアクセスは，ノンブロッキングモード
で行う必要がある．

BSD UNIX のノンブロッキングI/Oモードでは，通常であればカーネル中でブロッ
クされるような read/writeシステムコールからもすぐにリターンしてくる 
（この時，これらのシステムコールは EWOULDBLOCK エラーを報告する）．さら
に非同期I/Oモードを併用すると，それらのシステムコールを呼び出してもブ
ロックされない状況になった時に，UNIXカーネルは SIGIO シグナルを使って
そのことをプロセスに知らせる．


3.2. ItIs におけるサポート

BSD UNIX のノンブロッキングI/O を ItIs のタスクから利用するためには，
SIGIO を捕まえるシグナルハンドラを定義し，捕まえたシグナルを何らかの形
でタスクに通知する必要がある．そのための手段として，ItIs では，SIGIO 
シグナルの発生により呼び出されるコールバック関数を登録する機能を用意し
ている．

具体的には，SIGIO シグナルによりコールバック関数を実行させたい場合には，
SIGIO 通知イベントブロック（SIGIOEB）を用意し，その callback フィール
ドにコールバック関数へのポインタ，arg フィールドにコールバック関数へ渡
す引数を設定し，eneuque_sigioeb を用いて SIGIO 通知イベントキューに登
録する．SIGIO シグナルが発生すると，登録したコールバック関数がすべて呼
び出される．コールバック関数が 0 を返すと，関連する SIGIO 通知イベント
ブロックはキューに登録されたままとなり，続く SIGIO シグナルで再び同じ
コールバック関数が呼び出される．コールバック関数が 0 以外を返すと，
SIGIO 通知イベントブロックはキューから削除され，コールバック関数はそれ
以降呼び出されなくなる（include/bsd_sigio.h，systask/bsd_sigio.c）．

ノンブロッキングI/O サポートモジュールは，コールバック関数を呼び出すた
めに，内部でタスクを 1つ（tskid = TSK_BSD_SIGIO）と，SIGIO 通知イベン
トキューに対する排他アクセスのためにセマフォを 1つ（semid =
SEM_BSD_SIGIO）を用いている．ノンブロッキングI/O サポートモジュールを
用いるためには，システム構成設定ファイルで，内部で用いるタスクおよびセ
マフォが使えるように設定しなければならない．


3.3. ノンブロッキングI/O ライブラリ

ItIs 上のタスクがノンブロッキングI/O を使うのをサポートするライブラリ
として，nb_open，nb_close，nb_read，nb_write を用意している
（libitis/bsd_nbio.c）．この中で，nb_close は，単に close を呼び出すだ
けの関数である．

これらのライブラリの問題点として，errno が正しく扱えないことがある．
UNIX のシステムコールインタフェースでは，システムコールがエラーを起こ
した時のエラーの原因は errno 変数に設定されることになっているが，この
変数はプロセス全体で 1つしかなく，各タスクで共通となってしまうため，あ
るタスクが呼び出したシステムコールが返す errno を他のタスクが書き換え
てしまうおそれがある．

この問題を防ぐために，システムコールが返す errno を指定した領域に格納
するノンブロッキングI/Oライブラリとして，nbe_open，nbe_close，nbe_read，
nbe_writeを用意している（libitis/bsd_nbeio.c）．

一般に，read/writeシステムコールを使うタスクは，シグナルによるシステム
コール実行の中断を示す EINTR エラーに対処する必要があるが，ノンブロッ
キングI/Oモードの時に EINTR エラーが起こるかどうかは不明である．ItIs 
の内部では，すべてのシグナルをマスクして read/writeシステムコールを呼
び出すため（このようにしないと，errno の値が他のタスクによって書き換え
られるおそれがある），これらのライブラリ中で EINTR エラーは起こらない
と考えてチェックしていない．


3.4. 疑似シリアルドライバ

BSD UNIX上のシミュレーション環境を，ネイティブ環境となるべく近いものと
するために，ネイティブ環境のシリアルインタフェースドライバと同等の機能
を持つ疑似シリアルドライバを用意している（systask/bsd_serial.c）．疑似
シリアルドライバは，上で述べたノンブロッキングI/O の機能を用いて，シリ
アルポートに対する入出力を，標準入出力に対して行うものである．


４．インストール・その他

4.1. インストール

BSD UNIX上のシミュレーション環境をインストールするには，ItIs の標準リ
リースに含まれる以外に，以下のツールが必要である．

    GNU Cコンパイラ（GCC, 動作確認は SunOS では egcs-1.0.1 release
				  ／ FreeBSD では 2.7.2.1）
    perl 4（動作確認は 4.036）
    GNU Make（動作確認は 3.75）

標準的なインストール手順は以下の通りである．

最初に，ItIs を展開したディレクトリに，オブジェクトファイルを置くため
のディレクトリを作る（ディレクトリ名は何でもよい）．

    % mkdir BSD
    % cd BSD

sample から，適当な Makefile と config.def をコピーし，内容を作りたい
カーネル用に編集する．

    % cp ../sample/Makefile.XXX Makefile
    % cp ../sample/config.def.bsd config.def
    % emacs Makefile config.def

FreeBSD 用の Makefile は，Makefile.sunos4 の "SYS = sunos4" という行を 
"SYS = freebsd" と置き換えて作ればよい（config.def は BSD UNIX 上の動
作環境で共通）．

Makefile の依存関係定義部を作ってから，オブジェクトを作る．

    % gmake depend
    % gmake itis


4.2. 疑似シリアルドライバ使用上の注意

疑似シリアルドライバは，標準入力をノンブロッキングの RAWモードに設定す
る．標準入力をノンブロッキングの RAWモードに設定したままの状態でプログ
ラムを終了すると，シェルが正しく動作しなくなる．そのため，ItIs を終了
する前に必ず標準入力を元の状態に戻す必要があるが，プロセスを終了させる
シグナルは数多くあり，そのすべてには対処していない．また，ユーザプログ
ラムで捕まえることのできないシグナルもあり，完全に対処することは不可能
である．


4.3. デバッガ使用上のヒント

BSD UNIX上のシミュレーション環境は，UNIX上のシンボリックデバッガと組み
合わせて使うことで，ItIs を用いたシステムのデバッグに力を発揮するわけ
だが，デバッガと組み合わせて使う上で，ItIs がタスク切り替えに SIGUSR2
シグナルを使っているために，タスク切り替えの度にデバッガに制御が戻って
しまうという問題がある．GNU シンボリックデバッガ（GDB）の場合には，次
のコマンドによりデバッガが SIGUSR2 を捕まえないように設定することがで
きる．

    (gdb) handle SIGUSR2 nostop noprint

このコマンドを，.gdbinit に設定しておくと便利である．

また，条件付ブレークポイントをサポートしているデバッガの場合は，特定の
タスクが特定のアドレスを実行した場合に限って実行を停止させることができ
る（停止するのは，システム全体で，特定のタスクだけではない）．例えば，
GDB の場合には，次のコマンドにより，ID が TSKID のタスクが関数 FUNC を
呼び出した場合にのみ実行を停止させることができる（厳密には，この指定方
法では，ID が TSKID のタスクが実行中に起動された割込みハンドラが FUNC 
を呼び出した場合にも停止する）．

    (gdb) break FUNC if ctxtsk->tskid==TSKID


4.4. バグ

原因は完全にはわかっていないが，FreeBSD では，デバッガからのシングルス
テップがうまく動作しない．具体的には，1命令進む前に（SIGALM や SIGIO 
により）シグナルハンドラが起動してしまう．SunOS ではうまく動作するため，
FreeBSD のカーネルないしは GDB の問題と思われる．
